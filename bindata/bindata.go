// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/bsdtar.yaml
// assets/cluster-role.yaml
// assets/spdytests.yaml

package bindata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAssetsBsdtaryaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xbd\x4e\x03\x31\x0c\xc7\xf7\x3c\x85\x75\x7b\x89\x58\xb3\xb2\x43" +
	"\x27\x76\x5f\x62\xc0\xe2\xe2\x1c\xb6\xef\x44\xdf\x1e\x5d\x8b\x54\xab\x5b\x7e\xff\xaf\x18\x57\x7e\x27\x35\x1e\x52" +
	"\x60\x7f\x4e\xdf\x2c\xad\xc0\x79\xb4\xd4\xc9\xb1\xa1\x63\x49\x00\x82\x9d\x0a\xcc\xd6\x1c\x35\x01\x2c\x38\xd3\x62" +
	"\x87\xf1\x60\xd9\x4a\xf5\x90\x95\xcc\x51\xfd\x3c\x16\xae\x97\x02\xaf\xb4\xd3\xd1\xab\x43\x1c\x59\x48\xaf\xdd\xd3" +
	"\xe3\x2c\x00\x77\xfc\xa4\x02\x3f\x1b\x5e\x9e\x78\x64\xed\xa8\x68\xf5\x2b\xdf\x22\x65\x41\x27\xf3\x6b\xd2\xbc\xb1" +
	"\x14\x70\xdd\xe8\xce\x6f\x52\x29\x68\x75\xf4\x8e\xd2\x6e\x77\x1e\xff\x4d\x79\x33\xcd\x33\xcb\xff\xe0\x74\x77\x4e" +
	"\x7b\x84\xdf\x08\x23\x42\x8f\xf0\x11\x21\xbe\x5f\x02\x64\xef\xeb\x94\xfe\x02\x00\x00\xff\xff\x49\x2d\x93\xaa\x67" +
	"\x01\x00\x00")

func bindataAssetsBsdtaryamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsBsdtaryaml,
		"assets/bsdtar.yaml",
	)
}



func bindataAssetsBsdtaryaml() (*asset, error) {
	bytes, err := bindataAssetsBsdtaryamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/bsdtar.yaml",
		size: 359,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1580719114, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsClusterroleyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x8e\xc2\x30\x0c\x45\xf7\x39\x45\x2e\x90\x8e\x66\x37\xca\x6e" +
	"\x66\x6e\x50\x24\xf6\x6e\xe2\x82\x69\x6a\x57\xb1\x53\x09\x4e\x8f\xa0\xa2\x2c\x58\xfe\x2f\xfd\xf7\x1f\x2c\x74\xc4" +
	"\xaa\x24\x1c\x7d\x1d\x20\x75\xd0\xec\x2c\x95\x6e\x60\x24\xdc\x4d\x3f\xda\x91\x7c\xad\xdf\x6e\x22\xce\xd1\xff\x97" +
	"\xa6\x86\xb5\x97\x82\x7f\xc4\x99\xf8\xe4\x66\x34\xc8\x60\x10\x9d\xf7\x0c\x33\x46\x0f\x79\x26\x0e\x26\x41\x97\x7c" +
	"\x35\x54\x53\xa7\x6d\xb8\x60\x32\x8d\x2e\xf8\x8d\x74\xc0\xba\x52\xc2\xdf\x94\xa4\xb1\xed\xdb\x8c\x23\xb4\xf2\xca" +
	"\xba\x40\xc2\xe8\xdf\x9c\x2a\x05\x7b\x1c\x1f\x5f\x1f\x42\x3b\x23\x6d\x5d\x78\x7a\xb8\x7b\x00\x00\x00\xff\xff\x4f" +
	"\xc7\xf7\xd8\xe2\x00\x00\x00")

func bindataAssetsClusterroleyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsClusterroleyaml,
		"assets/cluster-role.yaml",
	)
}



func bindataAssetsClusterroleyaml() (*asset, error) {
	bytes, err := bindataAssetsClusterroleyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/cluster-role.yaml",
		size: 226,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1580566427, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataAssetsSpdytestsyaml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcf\x4e\xc4\x20\x10\xc6\xef\x7d\x8a\xc9\x1e\x3c\x6d\x4b\xeb\xc5" +
	"\x66\x6e\xbe\x41\x4f\xde\x67\x01\x5d\xb2\xc0\x20\x43\x35\x4d\x7c\x78\x43\xad\xad\x89\x9b\x90\xf0\xe7\xf7\x63\xbe" +
	"\x8f\x92\x7b\xb1\x59\x1c\x47\x84\x8f\xa1\xb9\xb9\x68\x10\x26\x36\x4d\xb0\x85\x0c\x15\xc2\x06\x20\x52\xb0\x08\x92" +
	"\xcc\x52\xac\x14\x69\x00\x3c\x5d\xac\x97\xca\xfe\x53\x49\x56\x57\xa2\x39\x16\x72\xd1\xe6\xd5\x6b\xef\x4c\x01\x70" +
	"\x81\xde\xec\x34\x7b\x3f\xb1\x77\x7a\x41\x78\xf6\x9f\xb4\xfc\x61\x08\xef\x33\x2d\x9d\x63\x95\x03\x65\x12\x7d\x55" +
	"\xfb\x04\xf4\x54\xf7\x55\x4e\x9c\xcb\xd6\xa7\x66\xed\xd9\x13\xe7\x82\x30\xf6\x63\xbf\x32\xcd\x21\x50\x34\x87\x78" +
	"\x52\x17\x17\x95\x5c\x4f\xc7\x4b\xab\x8f\xcb\xd7\x76\x02\x50\xb3\x64\xe5\x59\x93\xff\xf9\xf1\x5b\x02\x1e\x76\x45" +
	"\x58\x53\x81\xd6\x6c\xab\xe8\xd4\x7a\xac\xd1\xe7\x57\xce\xb7\x73\xb6\xb3\x58\x32\x26\x57\x82\xc3\xe3\x53\xd7\x77" +
	"\x7d\x37\xe0\x38\x8c\x43\xf3\x1d\x00\x00\xff\xff\x57\x44\xb8\xb6\x88\x01\x00\x00")

func bindataAssetsSpdytestsyamlBytes() ([]byte, error) {
	return bindataRead(
		_bindataAssetsSpdytestsyaml,
		"assets/spdytests.yaml",
	)
}



func bindataAssetsSpdytestsyaml() (*asset, error) {
	bytes, err := bindataAssetsSpdytestsyamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "assets/spdytests.yaml",
		size: 392,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1580653138, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"assets/bsdtar.yaml":       bindataAssetsBsdtaryaml,
	"assets/cluster-role.yaml": bindataAssetsClusterroleyaml,
	"assets/spdytests.yaml":    bindataAssetsSpdytestsyaml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"assets": {Func: nil, Children: map[string]*bintree{
		"bsdtar.yaml": {Func: bindataAssetsBsdtaryaml, Children: map[string]*bintree{}},
		"cluster-role.yaml": {Func: bindataAssetsClusterroleyaml, Children: map[string]*bintree{}},
		"spdytests.yaml": {Func: bindataAssetsSpdytestsyaml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
